#!/usr/bin/env python3
"""
Script para probar todos los m√©todos de pago de Caffe & Miga
"""

import requests
import json

def test_efectivo():
    """Probar pago en efectivo"""
    print("üíµ Probando pago en efectivo...")
    
    test_data = {
        "items": [
            {
                "id": "test_cafe",
                "title": "Caf√© Americano",
                "quantity": 1,
                "unit_price": 25.0,
                "description": "Caf√© de prueba"
            }
        ],
        "payer": {
            "name": "Test Efectivo",
            "phone": {
                "area_code": "502",
                "number": "12345678"
            },
            "email": "test@efectivo.com"
        },
        "payment_method": "efectivo",
        "metadata": {
            "pickup_time": "14:00",
            "source": "web_test"
        },
        "notes": "Pedido de prueba - efectivo"
    }
    
    try:
        response = requests.post(
            "http://localhost:3000/pos/orders",
            json=test_data,
            timeout=10
        )
        
        if response.status_code == 200:
            print("‚úÖ Pago en efectivo: FUNCIONANDO")
            result = response.json()
            print(f"   Order ID: {result.get('order_id', 'N/A')}")
            return True
        else:
            print(f"‚ùå Pago en efectivo: ERROR {response.status_code}")
            print(f"   Respuesta: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error en efectivo: {e}")
        return False

def test_terminal():
    """Probar pago con terminal"""
    print("üí≥ Probando pago con terminal...")
    
    test_data = {
        "items": [
            {
                "id": "test_cafe",
                "title": "Caf√© Latte", 
                "quantity": 1,
                "unit_price": 35.0,
                "description": "Latte de prueba"
            }
        ],
        "payer": {
            "name": "Test Terminal",
            "phone": {
                "area_code": "502", 
                "number": "87654321"
            },
            "email": "test@terminal.com"
        },
        "payment_method": "terminal",
        "metadata": {
            "pickup_time": "15:00",
            "source": "web_test"
        },
        "notes": "Pedido de prueba - terminal"
    }
    
    try:
        response = requests.post(
            "http://localhost:3000/pos/orders",
            json=test_data,
            timeout=10
        )
        
        if response.status_code == 200:
            print("‚úÖ Pago con terminal: FUNCIONANDO")
            result = response.json()
            print(f"   Order ID: {result.get('order_id', 'N/A')}")
            return True
        else:
            print(f"‚ùå Pago con terminal: ERROR {response.status_code}")
            print(f"   Respuesta: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error en terminal: {e}")
        return False

def test_mercadopago():
    """Probar pago con Mercado Pago"""
    print("üõí Probando pago con Mercado Pago...")
    
    test_data = {
        "items": [
            {
                "id": "test_frappe",
                "title": "Frapp√© de Chocolate",
                "quantity": 1,
                "unit_price": 45.0,
                "description": "Frapp√© de prueba",
                "currency_id": "MXN",
                "category_id": "food"
            }
        ],
        "payer": {
            "name": "Test MercadoPago",
            "surname": "Usuario",
            "email": "test@mercadopago.com",
            "phone": {
                "area_code": "502",
                "number": "11223344"
            },
            "identification": {
                "type": "DNI",
                "number": "12345678"
            },
            "address": {
                "street_name": "Test Street",
                "street_number": 123,
                "zip_code": "01001"
            }
        },
        "back_urls": {
            "success": "http://localhost:3000/success.html",
            "failure": "http://localhost:3000/failure.html", 
            "pending": "http://localhost:3000/pending.html"
        },
        "auto_return": "approved",
        "notification_url": "http://localhost:3000/webhook",
        "metadata": {
            "pickup_time": "16:00",
            "customer_phone": "11223344"
        }
    }
    
    try:
        response = requests.post(
            "http://localhost:3000/create_preference",
            json=test_data,
            timeout=10
        )
        
        if response.status_code == 200:
            print("‚úÖ Mercado Pago: FUNCIONANDO")
            result = response.json()
            print(f"   Preference ID: {result.get('id', 'N/A')}")
            print(f"   Init Point: {result.get('init_point', 'N/A')[:50]}...")
            return True
        else:
            print(f"‚ùå Mercado Pago: ERROR {response.status_code}")
            print(f"   Respuesta: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error en Mercado Pago: {e}")
        return False

def test_servidor():
    """Verificar que el servidor est√© funcionando"""
    print("üåê Verificando servidor...")
    
    try:
        response = requests.get("http://localhost:3000/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Servidor: FUNCIONANDO")
            return True
        else:
            print(f"‚ùå Servidor: ERROR {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Error del servidor: {e}")
        return False

if __name__ == "__main__":
    print("üß™ Test de M√©todos de Pago - Caffe & Miga")
    print("=" * 50)
    
    # Test del servidor
    if not test_servidor():
        print("\n‚ùå El servidor no est√° funcionando. Ejecuta 'python main.py' primero.")
        exit(1)
    
    print()
    
    # Test de cada m√©todo
    efectivo_ok = test_efectivo()
    print()
    
    terminal_ok = test_terminal()
    print()
    
    mercadopago_ok = test_mercadopago()
    print()
    
    # Resumen
    print("üìä RESUMEN DE PRUEBAS:")
    print("=" * 30)
    print(f"üíµ Efectivo:      {'‚úÖ OK' if efectivo_ok else '‚ùå FALLA'}")
    print(f"üí≥ Terminal:      {'‚úÖ OK' if terminal_ok else '‚ùå FALLA'}")
    print(f"üõí Mercado Pago:  {'‚úÖ OK' if mercadopago_ok else '‚ùå FALLA'}")
    
    if efectivo_ok and terminal_ok and mercadopago_ok:
        print("\nüéâ ¬°Todos los m√©todos de pago funcionan correctamente!")
    else:
        print("\n‚ö†Ô∏è Algunos m√©todos de pago tienen problemas.")
        print("üí° Revisa los logs del servidor para m√°s detalles.")
